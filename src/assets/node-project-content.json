{"title":"node-project","document":{"type":"doc","content":[{"type":"layoutSection","content":[{"type":"layoutColumn","attrs":{"width":50},"content":[{"type":"panel","attrs":{"panelType":"note"},"content":[{"type":"paragraph","content":[{"text":"my favourite node project setup with all the development housekeeping tools","type":"text"}]}]}]},{"type":"layoutColumn","attrs":{"width":50},"content":[{"type":"paragraph","content":[{"type":"inlineCard","attrs":{"url":"https://github.com/viqueen/node-project"}},{"text":" ","type":"text"}]}]}]},{"type":"heading","attrs":{"level":2},"content":[{"text":"version manager","type":"text"}]},{"type":"paragraph","content":[{"text":"I like to pin my environment tools versions, and for Node projects, I rely on ","type":"text"},{"type":"inlineCard","attrs":{"url":"https://github.com/nvm-sh/nvm"}},{"text":" ","type":"text"}]},{"type":"codeBlock","content":[{"text":"echo 'v16.13.0' > '.nvmrc'\nnvm install\nnvm use","type":"text"}]},{"type":"heading","attrs":{"level":2},"content":[{"text":"build tool","type":"text"}]},{"type":"paragraph","content":[{"text":"There are few options available out there like ","type":"text"},{"type":"inlineCard","attrs":{"url":"https://docs.npmjs.com/about-npm"}},{"text":"  and ","type":"text"},{"text":"yarn","type":"text","marks":[{"type":"link","attrs":{"href":"https://yarnpkg.com/getting-started"}}]},{"text":"  ","type":"text"}]},{"type":"paragraph","content":[{"text":"I personally opt for ","type":"text"},{"text":"npm","type":"text","marks":[{"type":"strong"}]},{"text":" when setting up my own projects , but I donâ€™t mind ","type":"text"},{"text":"yarn","type":"text","marks":[{"type":"strong"}]},{"text":" at all","type":"text"}]},{"type":"codeBlock","content":[{"text":"npm init","type":"text"}]},{"type":"heading","attrs":{"level":2},"content":[{"text":"static typing","type":"text"}]},{"type":"paragraph","content":[{"text":"When youâ€™re a Java developer at heart, youâ€™ll have difficulty giving up static typing ; in JavaScript world, that compiler safety net comes with ","type":"text"},{"text":"Typescript","type":"text","marks":[{"type":"strong"}]},{"text":" that enriches ","type":"text"},{"type":"inlineCard","attrs":{"url":"https://www.typescriptlang.org/"}},{"text":"  .","type":"text"}]},{"type":"codeBlock","content":[{"text":"npm install typescript @types/node --save-dev","type":"text"}]},{"type":"paragraph","content":[{"text":"I donâ€™t dive too much in TS configuration to be honest â€¦ unless absolutely required , so I keep using the same settings over and over â€¦ because why not","type":"text"}]},{"type":"paragraph","content":[{"text":"Notice that I exclude the tests (those are to be executed with a Typescript flavoured runner, see next section)","type":"text"}]},{"type":"codeBlock","attrs":{"language":"json"},"content":[{"text":">> tsconfig.json\n\n{\n  \"compilerOptions\": {\n    \"lib\": [\"dom\", \"es6\"],\n    \"module\": \"commonjs\",\n    \"rootDir\": \"src\",\n    \"outDir\": \"dist\",\n    \"target\": \"es5\",\n    \"sourceMap\": true,\n    \"declaration\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"esModuleInterop\": true,\n    \"moduleResolution\": \"node\",\n    \"resolveJsonModule\": true,\n    \"strict\": true,\n    \"jsx\": \"react\"\n  },\n  \"exclude\": [\n    \"node_modules\",\n    \"dist\",\n    \"coverage\",\n    \"src/**/*.test.ts\",\n    \"src/**/*.test.tsx\",\n    \"src/**/*.snap\"\n  ]\n}","type":"text"}]},{"type":"paragraph","content":[{"text":"And I use the following scripts to build my project in both development mode and on a CI agent","type":"text"}]},{"type":"codeBlock","attrs":{"language":"json"},"content":[{"text":">> package.json\n\n\"scripts\": {\n    \"build\": \"tsc --watch\",\n    \"ci:build\": \"tsc\"\n},","type":"text"}]},{"type":"heading","attrs":{"level":2},"content":[{"text":"testing","type":"text"}]},{"type":"paragraph","content":[{"text":"Iâ€™ve seen all sorts of test frameworks for JavaScript, Iâ€™ve survived them all ðŸ™ˆ, the last one Iâ€™ve converted some ancient legacy to is ","type":"text"},{"type":"inlineCard","attrs":{"url":"https://jestjs.io/"}},{"text":" ","type":"text"}]},{"type":"codeBlock","content":[{"text":"npm install jest @types/jest ts-jest --save-dev ","type":"text"}]},{"type":"paragraph","content":[{"text":"I also keep a very simple test configuration, thereâ€™s beauty in simplicity right ?","type":"text"}]},{"type":"codeBlock","attrs":{"language":"javascript"},"content":[{"text":">> jest.config.js\n\nmodule.exports = {\n    roots: ['<rootDir>/src'],\n    testMatch: [\n        '**/__tests__/**/*.+(ts|tsx|js)',\n        '**/?(*.)+(spec|test).+(ts|tsx|js)',\n    ],\n    preset: 'ts-jest',\n    testEnvironment: 'node',\n    collectCoverage: true,\n    coverageDirectory: 'coverage',\n};","type":"text"}]},{"type":"paragraph","content":[{"text":"Noticed that ","type":"text"},{"text":"ts-jest","type":"text","marks":[{"type":"code"}]},{"text":" ? thatâ€™s what lets us exclude the tests from our typescript configuration and yet be able to run them with ","type":"text"},{"text":"jest","type":"text","marks":[{"type":"code"}]},{"text":" when needed.","type":"text"}]},{"type":"paragraph","content":[{"text":"I add the following to my ","type":"text"},{"text":"package.json","type":"text","marks":[{"type":"code"}]},{"text":" to be able to run the tests locally and on a build agent","type":"text"}]},{"type":"codeBlock","attrs":{"language":"json"},"content":[{"text":">> package.json\n\n\"scripts\": {\n  ...\n  \"test\": \"jest --watchAll --collect-coverage\",\n  \"ci:test\": \"jest\",\n}","type":"text"}]},{"type":"heading","attrs":{"level":2},"content":[{"text":"code formatting","type":"text"}]},{"type":"paragraph","content":[{"text":"I like my code to be written in style, and as the pool of contributors increases, I like to also not have to argue about code-style during code reviews. Code reviews are meant for discussing solutions, architecture, logic, purpose â€¦ not the cosmetics : curly braces , semicolons , blank lines.","type":"text"}]},{"type":"paragraph","content":[{"text":"For this purpose I use ","type":"text"},{"type":"inlineCard","attrs":{"url":"https://prettier.io/"}},{"text":" ","type":"text"}]},{"type":"codeBlock","content":[{"text":"npm install prettier --save-dev","type":"text"}]},{"type":"paragraph","content":[{"text":"And just like every little piece of tooling, ","type":"text"},{"text":"prettier","type":"text","marks":[{"type":"code"}]},{"text":" comes with some configuration ","type":"text"},{"type":"emoji","attrs":{"id":"1f600","text":"ðŸ˜€","shortName":":grinning:"}},{"text":"  and this is what my simple one looks like","type":"text"}]},{"type":"codeBlock","attrs":{"language":"javascript"},"content":[{"text":">> .prettierrc.js\n\nmodule.exports = {\n    overrides: [\n        {\n            files: '*.js',\n            options: {\n                tabWidth: 4,\n                singleQuote: true,\n            },\n        },\n        {\n            files: '*.ts',\n            options: {\n                tabWidth: 4,\n                singleQuote: true,\n                trailingComma: 'none',\n            },\n        },\n    ],\n};","type":"text"}]},{"type":"paragraph","content":[{"text":"Also I wire it up with my ","type":"text"},{"text":"package.json","type":"text","marks":[{"type":"code"}]},{"text":" scripts","type":"text"}]},{"type":"codeBlock","attrs":{"language":"json"},"content":[{"text":">> package.json\n\n\"scripts\": {\n  ...\n  \"format:check\": \"prettier --check .\",\n  \"format\": \"prettier --check --write .\",\n}","type":"text"}]},{"type":"heading","attrs":{"level":2},"content":[{"text":"dependency updates","type":"text"}]},{"type":"paragraph","content":[{"text":"I like to use ","type":"text"},{"type":"inlineCard","attrs":{"url":"https://www.npmjs.com/package/npm-check-updates"}},{"text":"  which I find complements the built in ","type":"text"},{"text":"npm outdaded","type":"text","marks":[{"type":"code"}]},{"text":" and ","type":"text"},{"text":"npm update","type":"text","marks":[{"type":"code"}]},{"text":" commands","type":"text"}]},{"type":"codeBlock","content":[{"text":"npm install --save-dev npm-check-updates","type":"text"}]},{"type":"paragraph","content":[{"text":"I then configure that into my package using","type":"text"}]},{"type":"codeBlock","content":[{"text":">> package.json\n\n{\n  \"scripts\": {\n    ...\n    \"check-updates\": \"npm-check-updates -u\"\n  }\n}","type":"text"}]},{"type":"heading","attrs":{"level":2},"content":[{"text":"how to sanity check my project ?","type":"text"}]},{"type":"paragraph","content":[{"text":"Locally I like to configure my IDE with all the available integrations for ","type":"text"},{"text":"jest","type":"text","marks":[{"type":"code"}]},{"text":" and ","type":"text"},{"text":"prettier","type":"text","marks":[{"type":"code"}]},{"text":" and ","type":"text"},{"text":"typescript","type":"text","marks":[{"type":"code"}]},{"text":" ","type":"text"}]},{"type":"paragraph","content":[{"text":"I also rely on ","type":"text"},{"type":"inlineCard","attrs":{"url":"https://hasnae.atlassian.net/wiki/spaces/TECHNOLOGY/blog/2021/10/05/393253"}},{"text":" to automate running all the sanity checks at key moments (aka. when committing or pushing code)","type":"text"}]},{"type":"paragraph","content":[{"text":"In the wild of ","type":"text"},{"text":"Continuous Integration and Continuous Development ","type":"text","marks":[{"type":"strong"}]},{"text":", I like to wire up my ","type":"text"},{"text":"build","type":"text","marks":[{"type":"code"}]},{"text":" , ","type":"text"},{"text":"test","type":"text","marks":[{"type":"code"}]},{"text":" and ","type":"text"},{"text":"format:check","type":"text","marks":[{"type":"code"}]},{"text":" commands with ","type":"text"},{"text":"GitHub Actions","type":"text","marks":[{"type":"strong"}]},{"text":" â€¦ unless the codebase is hosted on ","type":"text"},{"text":"Bitbucket ","type":"text","marks":[{"type":"strong"}]},{"text":"in which case I use ","type":"text"},{"text":"Bitbucket Pipelines","type":"text","marks":[{"type":"strong"}]},{"text":" .","type":"text"}]},{"type":"paragraph","content":[{"text":"Those put aside, I also like to run some static scanners like ","type":"text"},{"text":"Sonar","type":"text","marks":[{"type":"strong"}]},{"text":" over my project to give me a sense of the following : ","type":"text"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"paragraph","content":[{"text":"how much tech debt I am accumulating","type":"text"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"text":"is my test coverage enough","type":"text"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"text":"bad code patterns I wasnâ€™t aware of","type":"text"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"text":"security flaws hidden in bad code usage.","type":"text"}]}]}]},{"type":"heading","attrs":{"level":2},"content":[{"text":"with further configurations","type":"text"}]},{"type":"extension","attrs":{"layout":"default","extensionType":"com.atlassian.confluence.macro.core","extensionKey":"children","parameters":{"macroParams":{"all":{"value":"true"}},"macroMetadata":{"macroId":{"value":"ba49676f212e98dbd93e0a7e880e401d"},"schemaVersion":{"value":"2"},"title":"Children Display"}},"localId":"3c1acde5-9713-47ef-bc3d-89734d4280cd"}}],"version":1}}